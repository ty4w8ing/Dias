     1                                  ; Proyecto de arquitectura de computadores
     2                                  ;
     3                                  ;	-Desarrollador: José Gustavo González
     4                                  ; 	-Carnet: 201269684
     5                                  ;	
     6                                  ;
     7                                  ; ---------------------------------------------------------------------------------------------------------------------------
     8                                  ; Este proyecto trata de buscar mediante el ingreso de datos de un usuario de una fecha en especifico con formato
     9                                  ; dd/mm/aaaa, el día de la semana en que se celebró dicho día, además el programa indica si el año de la fecha 
    10                                  ; indicada es un año bisiesto o no.
    11                                  ; ---------------------------------------------------------------------------------------------------------------------------
    12                                  
    13                                  ; La siguiente parte de código son tags para hacer más legible el código
    14                                  	sys_exit 	equ 	1
    15                                  	sys_read 	equ 	3
    16                                  	sys_write 	equ 	4
    17                                  	sys_close 	equ 	6
    18                                  	stdin 		equ		0
    19                                  	stdout 		equ 	1
    20                                  	
    21                                  	
    22                                  ; La siguiente parte de código son datos no inicializados
    23                                  section .bss
    24                                  	
    25                                  	inputLen equ 100		;buffer almacenador el string original del usuaro 
    26 00000000 <res 00000064>          	input resb inputLen		;largo de este buffer
    27                                  	
    28                                  	aLen equ 10				; a = (14 - Mes) / 12
    29 00000064 <res 0000000A>          	a resb aLen				;aca almacenaremos la variable "a" de la funcion 
    30                                  
    31                                  	yLen equ 10				; y = Año - a
    32 0000006E <res 0000000A>          	y resb yLen				;aca almacenaremos la variable "y" de la funcion 
    33                                  	
    34                                  	mLen equ 10				; m = Mes + 12 * a - 2
    35 00000078 <res 0000000A>          	m resb mLen				;aca almacenaremos la variable "y" de la funcion 
    36                                  	
    37                                  	dLen equ 10				; Respuesta final
    38 00000082 <res 0000000A>          	d resb dLen				;aca almacenaremos la respuesta 
    39                                  	
    40 0000008C <res 00000020>          	dia resb 32				; reservo espacio para las variales dia, mes y year (año)
    41 000000AC <res 00000020>          	mes resb 32
    42 000000CC <res 00000080>          	year resb 128
    43                                  	
    44                                  
    45                                  ; La siguiente parte de código son datos inicializados
    46                                  section .data
    47                                  
    48                                  ;todas los siguientes datos son prints para el usurio
    49 00000000 496E6772657365206C-     solicitarFecha: db "Ingrese la fecha por favor: ",10		
    50 00000009 612066656368612070-
    51 00000012 6F72206661766F723A-
    52 0000001B 200A               
    53                                  lenSolicitarFecha: equ $-solicitarFecha						
    54                                  
    55 0000001D 442020202020202020-     sunday: db 	"D        OOO     M         M   I   N     N     GGGG       OOO",10,"D D     O   O    M M     M M   I   N N   N    G          O   O",10,"D  D   O     O   M  M   M  M   I   N  N  N   G    GGG   O     O",10
    56 00000026 4F4F4F20202020204D-
    57 0000002F 202020202020202020-
    58 00000038 4D202020492020204E-
    59 00000041 20202020204E202020-
    60 0000004A 202047474747202020-
    61 00000053 202020204F4F4F0A44-
    62 0000005C 204420202020204F20-
    63 00000065 20204F202020204D20-
    64 0000006E 4D20202020204D204D-
    65 00000077 202020492020204E20-
    66 00000080 4E2020204E20202020-
    67 00000089 472020202020202020-
    68 00000092 20204F2020204F0A44-
    69 0000009B 2020442020204F2020-
    70 000000A4 2020204F2020204D20-
    71 000000AD 204D2020204D20204D-
    72 000000B6 202020492020204E20-
    73 000000BF 204E20204E20202047-
    74 000000C8 202020204747472020-
    75 000000D1 204F20202020204F0A-
    76 000000DA 44204420202020204F-
    77 000000E3 2020204F202020204D-
    78 000000EC 2020204D204D202020-
    79 000000F5 4D202020492020204E-
    80 000000FE 2020204E204E202020-
    81 00000107 204720202020204720-
    82 00000110 2020204F2020204F0A-
    83 00000119 442020202020202020-
    84 00000122 4F4F4F20202020204D-
    85 0000012B 202020204D20202020-
    86 00000134 4D202020492020204E-
    87 0000013D 20202020204E202020-
    88 00000146 202047474747472020-
    89 0000014F 202020204F4F4F0A   
    90                                  lenSunday: equ $-sunday		
    91                                  
    92 00000157 4C2020202020202055-     monday: db "L       U       U   N     N   EEEEEE    SSSSSS",10,"L       U       U   N N   N   E        S",10,"L       U       U   N  N  N   EEE       SSSSS",10,"L        U     U    N   N N   E              S",10,"LL
    93 00000160 202020202020205520-
    94 00000169 20204E20202020204E-
    95 00000172 202020454545454545-
    96 0000017B 202020205353535353-
    97 00000184 530A4C202020202020-
    98 0000018D 205520202020202020-
    99 00000196 552020204E204E2020-
   100 0000019F 204E20202045202020-
   101 000001A8 2020202020530A4C20-
   102 000001B1 202020202020552020-
   103 000001BA 202020202055202020-
   104 000001C3 4E20204E20204E2020-
   105 000001CC 204545452020202020-
   106 000001D5 202053535353530A4C-
   107 000001DE 202020202020202055-
   108 000001E7 202020202055202020-
   109 000001F0 204E2020204E204E20-
   110 000001F9 202045202020202020-
   111 00000202 202020202020202053-
   112 0000020B 0A4C4C4C4C4C202020-
   113 00000214 202055555555552020-
   114 0000021D 2020204E2020202020-
   115 00000226 4E2020204545454545-
   116 0000022F 452020205353535353-
   117 00000238 530A               
   118                                  lenMonday: equ $-monday
   119                                  
   120 0000023A 4D2020202020202020-     tuesday: db "M         M    AAAAA    RRRRR    TTTTTTT   EEEEEE    SSSSSSS",10,"M M     M M   A     A   R    R      T      E        S",10,"M  M   M  M   AAAAAAA   RRRRR       T      EEE       SSSSSS",10,"M   M M   M 
   121 00000243 204D20202020414141-
   122 0000024C 414120202020525252-
   123 00000255 525220202020545454-
   124 0000025E 545454542020204545-
   125 00000267 454545452020202053-
   126 00000270 5353535353530A4D20-
   127 00000279 4D20202020204D204D-
   128 00000282 202020412020202020-
   129 0000028B 412020205220202020-
   130 00000294 522020202020205420-
   131 0000029D 202020202045202020-
   132 000002A6 2020202020530A4D20-
   133 000002AF 204D2020204D20204D-
   134 000002B8 202020414141414141-
   135 000002C1 412020205252525252-
   136 000002CA 202020202020205420-
   137 000002D3 202020202045454520-
   138 000002DC 202020202020535353-
   139 000002E5 5353530A4D2020204D-
   140 000002EE 204D2020204D202020-
   141 000002F7 412020202020412020-
   142 00000300 205220202052202020-
   143 00000309 202020205420202020-
   144 00000312 202045202020202020-
   145 0000031B 202020202020202020-
   146 00000324 530A4D202020204D20-
   147 0000032D 2020204D2020204120-
   148 00000336 202020204120202052-
   149 0000033F 202020205220202020-
   150 00000348 202054202020202020-
   151 00000351 454545454545202020-
   152 0000035A 535353535353530A   
   153                                  lenTuesday: equ $-tuesday
   154                                  
   155 00000362 4D2020202020202020-     wendnesday: db "M         M   I   EEEEEE   RRRRR      CCCCCC     OOO     L	  EEEEEE    SSSSSSS",10,"M M     M M   I   E        R    R    C          O   O 	 L	  E        S",10,"M  M   M  M   I   EEEE     RRRRR    C  
   156 0000036B 204D20202049202020-
   157 00000374 454545454545202020-
   158 0000037D 525252525220202020-
   159 00000386 202043434343434320-
   160 0000038F 202020204F4F4F2020-
   161 00000398 2020204C0920204545-
   162 000003A1 454545452020202053-
   163 000003AA 5353535353530A4D20-
   164 000003B3 4D20202020204D204D-
   165 000003BC 202020492020204520-
   166 000003C5 202020202020205220-
   167 000003CE 202020522020202043-
   168 000003D7 202020202020202020-
   169 000003E0 204F2020204F200920-
   170 000003E9 4C0920204520202020-
   171 000003F2 20202020530A4D2020-
   172 000003FB 4D2020204D20204D20-
   173 00000404 202049202020454545-
   174 0000040D 452020202020525252-
   175 00000416 525220202020432020-
   176 0000041F 20202020202020204F-
   177 00000428 20202020204F202020-
   178 00000431 4C2020200920204545-
   179 0000043A 452020202020202053-
   180 00000443 53535353530A4D2020-
   181 0000044C 204D204D2020204D20-
   182 00000455 202049202020452020-
   183 0000045E 202020202020522020-
   184 00000467 205220202020204320-
   185 00000470 202020202020202020-
   186 00000479 4F2020204F2009204C-
   187 00000482 092020452020202020-
   188 0000048B 202020202020202020-
   189 00000494 20530A4D202020204D-
   190 0000049D 202020204D20202049-
   191 000004A6 202020454545454545-
   192 000004AF 202020522020202052-
   193 000004B8 202020202043434343-
   194 000004C1 434320202020204F4F-
   195 000004CA 4F2009204C4C4C4C4C-
   196 000004D3 4C2020204545454545-
   197 000004DC 452020205353535353-
   198 000004E5 53530A             
   199                                  lenWendnesday: equ $-wendnesday
   200                                  
   201 000004E8 20204A4A4A4A4A2020-     thursday: db "  JJJJJ   U	  U	EEEEEE   V       V   EEEEEE    SSSSSSS",10,"      J	  U	  U	E         V  	V    E        S",10,"J     J	  U	 U	EEE        V   V     EEE       SSSSSS",10," J    J	   U	U 	E           V V 
   202 000004F1 205509202055094545-
   203 000004FA 454545452020205620-
   204 00000503 202020202020562020-
   205 0000050C 204545454545452020-
   206 00000515 202053535353535353-
   207 0000051E 0A2020202020204A09-
   208 00000527 202055092020550945-
   209 00000530 202020202020202020-
   210 00000539 562020095620202020-
   211 00000542 452020202020202020-
   212 0000054B 530A4A20202020204A-
   213 00000554 092020550920550945-
   214 0000055D 454520202020202020-
   215 00000566 205620202056202020-
   216 0000056F 202045454520202020-
   217 00000578 202020535353535353-
   218 00000581 0A204A202020204A09-
   219 0000058A 202020550955200945-
   220 00000593 202020202020202020-
   221 0000059C 202056205620202020-
   222 000005A5 202045202020202020-
   223 000005AE 202020202020202020-
   224 000005B7 530A20204A4A4A0920-
   225 000005C0 202020555555550945-
   226 000005C9 454545454520202020-
   227 000005D2 202020560920202020-
   228 000005DB 204545454545452020-
   229 000005E4 20535353535353530A 
   230                                  lenThursday: equ $-thursday
   231                                  
   232 000005ED 562020202020202020-     friday: db "V        V   I   EEEEEE   RRRRR    N	 N   EEEEEE    SSSSSSS",10, " V  	V    I   E        R    R   N N	 N   E        S",10,"  V    V     I   EEE      RRRRR	   N  N	 N   EEE       SSSSSS",10,"   V  V      
   233 000005F6 562020204920202045-
   234 000005FF 454545454520202052-
   235 00000608 52525252202020204E-
   236 00000611 09204E202020454545-
   237 0000061A 454545202020205353-
   238 00000623 53535353530A205620-
   239 0000062C 200956202020204920-
   240 00000635 202045202020202020-
   241 0000063E 202052202020205220-
   242 00000647 20204E204E09204E20-
   243 00000650 202045202020202020-
   244 00000659 2020530A2020562020-
   245 00000662 202056202020202049-
   246 0000066B 202020454545202020-
   247 00000674 202020525252525209-
   248 0000067D 2020204E20204E0920-
   249 00000686 4E2020204545452020-
   250 0000068F 202020202053535353-
   251 00000698 53530A202020562020-
   252 000006A1 562020202020204920-
   253 000006AA 202045202020202020-
   254 000006B3 202052202020520920-
   255 000006BC 20204E2020204E204E-
   256 000006C5 202020452020202020-
   257 000006CE 202020202020202020-
   258 000006D7 20530A202020202056-
   259 000006E0 092020202020492020-
   260 000006E9 204545454545452020-
   261 000006F2 205220202020522020-
   262 000006FB 204E09204E20202045-
   263 00000704 454545454520202053-
   264 0000070D 5353535353530A     
   265                                  lenFriday: equ $-friday
   266                                  
   267 00000714 205353535353535320-     saturday: db " SSSSSSS    AAAAA    BBBBB     AAAAA    D          OOOO",10,"S          A     A   B    B   A     A   D  D      O    O",10," SSSSSS    AAAAAAA   BBBBB    AAAAAAA   D    D   O      O",10,"       S   A   
   268 0000071D 202020414141414120-
   269 00000726 202020424242424220-
   270 0000072F 202020204141414141-
   271 00000738 202020204420202020-
   272 00000741 2020202020204F4F4F-
   273 0000074A 4F0A53202020202020-
   274 00000753 202020204120202020-
   275 0000075C 204120202042202020-
   276 00000765 204220202041202020-
   277 0000076E 202041202020442020-
   278 00000777 442020202020204F20-
   279 00000780 2020204F0A20535353-
   280 00000789 535353202020204141-
   281 00000792 414141414120202042-
   282 0000079B 424242422020202041-
   283 000007A4 414141414141202020-
   284 000007AD 442020202044202020-
   285 000007B6 4F2020202020204F0A-
   286 000007BF 202020202020205320-
   287 000007C8 202041202020202041-
   288 000007D1 202020422020202042-
   289 000007DA 202020412020202020-
   290 000007E3 412020204420204420-
   291 000007EC 20202020204F202020-
   292 000007F5 204F0A535353535353-
   293 000007FE 532020202041202020-
   294 00000807 202041202020424242-
   295 00000810 424220202020412020-
   296 00000819 202020412020204420-
   297 00000822 202020202020202020-
   298 0000082B 4F4F4F4F0A         
   299                                  lenSaturday: equ $-saturday
   300                                  
   301 00000830 456C2061C3B16F2065-     es_bisiesto: db "El año es bisiesto",10,10,10
   302 00000839 732062697369657374-
   303 00000842 6F0A0A0A           
   304                                  len_es_bisiesto: equ $-es_bisiesto
   305                                  
   306 00000846 456C2061C3B16F204E-     es_no_bisiesto: db "El año NO es bisiesto",10,10,10
   307 0000084F 4F2065732062697369-
   308 00000858 6573746F0A0A0A     
   309                                  len_es_no_bisiesto: equ $-es_no_bisiesto
   310                                  ;finalizan los prints de usuario
   311                                  
   312                                  ; La siguiente parte de código son las instrucciones
   313                                  section .text
   314                                  ; inicio del codigo del programa
   315                                  	global _start 
   316                                  	
   317                                  _start:
   318 00000000 90                      	nop								; mantiene feliz al gbd
   319                                  	
   320 00000001 BA1D000000              	mov edx, lenSolicitarFecha		;muevo al edx el largo del mensaje
   321 00000006 B9[00000000]            	mov ecx, solicitarFecha			;muevo al ecx el puntero del mesaje
   322 0000000B E84C020000              	call DisplayText				;llamo a la rutina que me despliega en pantalla
   323                                  	
   324 00000010 BA64000000              	mov edx, inputLen				;muevo al edx el largo del mensaje
   325 00000015 B9[00000000]            	mov ecx, input					;muevo al ecx el puntero del mesaje
   326 0000001A E84A020000              	call ReadText					;llamo a la rutina que me genera un CIN
   327 0000001F 89C1                    	mov ecx, eax					; muevo al ecx la cantidad de digitos leidos
   328 00000021 49                      	dec ecx							; decremento el ecx
   329 00000022 C681[00000000]00        	mov byte[input+ecx],0h			;muevo al ultimo bit un null 
   330 00000029 B900000000              	mov ecx, 0						;muevo al ecx un cero que me servira de contador de digitos
   331                                  
   332                                  ciclo:								;ciclo que lee los dias del input
   333 0000002E 31C0                    	xor eax, eax					;limpio el eax
   334 00000030 8A81[00000000]          	mov al, byte[input+ecx]			;muevo a la parte baja el primer byte del mesaje
   335 00000036 41                      	inc ecx							;incremento el contador
   336 00000037 3C20                    	cmp al, 20h						;comparo el byte actual con un espacio en blanco
   337 00000039 75F3                    	jne ciclo						;si no es igual sigo con el ciclo
   338 0000003B 51                      	push ecx						;si es igual guardo el contador
   339 0000003C 49                      	dec ecx							;decremento el contador para saber la cantidad de digitos
   340 0000003D 8D35[00000000]          	lea esi, [input]				;ubico un puntero al esi para convertirlo a integer
   341 00000043 E84C020000              	call string_to_int				;llamo a la funcio q me tranforma un string a integer
   342 00000048 891D[8C000000]          	mov [dia], ebx					;muevo al buffer el dia (integer)
   343 0000004E 59                      	pop ecx							;recupero el contador
   344                                  	
   345                                  ciclo2:								;ciclo que lee los meses del input
   346 0000004F 31C0                    	xor eax, eax					;limpio el eax
   347 00000051 8A81[00000000]          	mov al, byte[input+ecx]			;muevo a la parte baja el primer byte del mesaje
   348 00000057 41                      	inc ecx							;incremento el contador
   349 00000058 3C20                    	cmp al, 20h						;comparo el byte actual con un espacio en blanco
   350 0000005A 75F3                    	jne ciclo2						;si no es igual sigo con el ciclo
   351 0000005C B902000000              	mov ecx, 2						;muevo 2 al ecx q seran la cantidad de digitos a convertir
   352 00000061 8D35[03000000]          	lea esi, [input+3]				;ubico un puntero al esi para convertirlo a integer (mes)
   353 00000067 E828020000              	call string_to_int				;llamo a la funcio q me tranforma un string a integer
   354 0000006C 891D[AC000000]          	mov [mes], ebx					;muevo al buffer el mes (integer)
   355 00000072 B906000000              	mov ecx, 6						;fijo el contador a los años (string)
   356 00000077 BA00000000              	mov edx, 0						;coloco un segundo contador para la cantidad de digitos
   357                                  	
   358                                  ciclo3:								;ciclo que lee los años del input
   359 0000007C 31C0                    	xor eax, eax					;limpio el eax
   360 0000007E 8A81[00000000]          	mov al, byte[input+ecx]			;muevo a la parte baja el primer byte del mesaje
   361 00000084 41                      	inc ecx							;incremento el contador
   362 00000085 42                      	inc edx							;incremento el 2do contador
   363 00000086 3C00                    	cmp al, 0h						;comparo el byte actual con un nulo
   364 00000088 75F2                    	jne ciclo3						;si no es igual sigo con el ciclo
   365 0000008A 4A                      	dec edx							;decremento para saber la cantidad de digitos exacta 
   366 0000008B 89D1                    	mov ecx, edx					;fijo los digitos a leer
   367 0000008D 8D35[06000000]          	lea esi, [input+6]				;muevo al buffer el año (integer)
   368 00000093 E8FC010000              	call string_to_int				;llamo a la funcio q me tranforma un string a integer
   369 00000098 A3[CC000000]            	mov [year], eax					;muevo al buffer el año (integer)
   370                                  	;////////////////////////////////////////////////////////////////////////////////////////////////////////
   371                                  	;determinar si es bisiesto
   372                                  	;Un año es bisiesto si es divisible entre 4, excepto si es divisible entre 100 pero no entre 400.
   373                                  bisiesto:
   374 0000009D 31C9                    	xor ecx, ecx					;limpo el ecx
   375 0000009F A1[CC000000]            	mov eax, [year]					;muevo al eax el año
   376 000000A4 BB04000000              	mov ebx, 4						;muevo al ebx un 4
   377 000000A9 31D2                    	xor edx, edx					;limpio el edx (debe estarlo, ya q div eax, ebx deja en el edx el modulo eax, ebx)
   378 000000AB F7F3                    	div ebx							;realizo la division
   379 000000AD 83FA00                  	cmp edx, 0						;comparo el modulo con cero
   380 000000B0 7539                    	jne bisiesto_false				;si no es igual dejo de buscar y digo q el año no es bisiesto
   381                                  	
   382 000000B2 A1[CC000000]            	mov eax, [year]					;muevo al eax el año
   383 000000B7 BB64000000              	mov ebx, 100					;muevo al ebx un 4
   384 000000BC 31D2                    	xor edx, edx					;limpio el edx (debe estarlo, ya q div eax, ebx deja en el edx el modulo eax, ebx)
   385 000000BE F7F3                    	div ebx							;realizo la division
   386 000000C0 83FA00                  	cmp edx, 0						;comparo el modulo con cero
   387 000000C3 7515                    	jne bisiesto_true				;si es igual ya no busco mas y digo q es año bisiesto
   388                                  	
   389 000000C5 A1[CC000000]            	mov eax, [year]					;muevo al eax el año
   390 000000CA BB90010000              	mov ebx, 400					;muevo al ebx un 400
   391 000000CF 31D2                    	xor edx, edx					;limpio el edx (debe estarlo, ya q div eax, ebx deja en el edx el modulo eax, ebx)
   392 000000D1 F7F3                    	div ebx							;realizo la division
   393 000000D3 83FA00                  	cmp edx, 0						;comparo el modulo con cero
   394 000000D6 7402                    	je bisiesto_true				; si es igual entonces con certeza digo q el año es bisiesto
   395 000000D8 EB11                    	jmp bisiesto_false				;si no es igual entonces el año no es bisiesto
   396                                  	
   397                                  ;funcion q imprime si el año es bisiesto
   398                                  bisiesto_true:						
   399 000000DA B9[30080000]            	mov ecx, es_bisiesto
   400 000000DF BA16000000              	mov edx, len_es_bisiesto
   401 000000E4 E873010000              	call DisplayText
   402 000000E9 EB0F                    	jmp find_a
   403                                  
   404                                  ;funcion q imprime si el año NO es bisiesto
   405                                  bisiesto_false:
   406 000000EB B9[46080000]            	mov ecx, es_no_bisiesto
   407 000000F0 BA19000000              	mov edx, len_es_no_bisiesto
   408 000000F5 E862010000              	call DisplayText
   409                                  ;////////////////////////////////////////////////////////////////////////////////////////////////////////
   410                                  	
   411                                  find_a:  ;a = (14 - Mes) / 12
   412 000000FA B80E000000              	mov eax, 14						;muevo al eax un 14
   413 000000FF 2B05[AC000000]          	sub eax, [mes]					;le resto el mes
   414 00000105 83F80C                  	cmp eax,12						;comparo con 12
   415 00000108 720C                    	jb .esCero						;si es menor a 12 a=0
   416 0000010A B801000000              	mov eax, 1						;muevo un 1 al eax
   417 0000010F A3[64000000]            	mov [a],eax						;a pasa a ser 1
   418 00000114 EB0A                    	jmp find_y						;brinco de una a buscar y
   419                                  .esCero:
   420 00000116 B800000000              	mov eax, 0						;muevo un 0 al eax
   421 0000011B A3[64000000]            	mov [a],eax						;a pasa a ser 0
   422                                  	
   423                                  	
   424                                  find_y: ;y = Año - a
   425 00000120 8B1D[64000000]          	mov ebx, [a]					;paso el a al ebx
   426 00000126 A1[CC000000]            	mov eax, [year]					;paso el año al eax
   427 0000012B 29D8                    	sub eax,ebx						;aplico la resta
   428 0000012D A3[6E000000]            	mov [y],eax						; el resultado se le settea a y
   429                                  
   430                                  find_m: ;m = Mes + 12 * a - 2
   431 00000132 A1[AC000000]            	mov eax, [mes]					;paso el mes al eax
   432 00000137 48                      	dec eax							;decremento el eax
   433 00000138 48                      	dec eax							;este paso se repite
   434 00000139 8B1D[64000000]          	mov ebx, [a]					;muevo al ebx el a
   435 0000013F 83FB00                  	cmp ebx, 0						;comparo si a es 0 para no hacer multiplicaciones
   436 00000142 740A                    	je .cero						;si es cero no hay q sumar
   437 00000144 83C00C                  	add eax, 12						;sumo el 12*a =12 (no hay q multilpicar)
   438 00000147 A3[78000000]            	mov [m],eax						;settero el m
   439 0000014C EB05                    	jmp find_d						;paso al siguiente paso
   440                                  .cero:
   441 0000014E A3[78000000]            	mov [m],eax						;setteo el m
   442                                  		
   443                                  find_d: 							;d = (día + y + y/4 - y/100 + y/400 + (31*m)/12) mod 7
   444 00000153 A1[8C000000]            	mov eax, [dia]					;paso al eax el dia
   445 00000158 8B1D[6E000000]          	mov ebx, [y]					;paso al ebx y
   446 0000015E 01D8                    	add eax, ebx 					;(día + y)
   447 00000160 50                      	push eax						;salvo la suma
   448 00000161 A1[6E000000]            	mov eax, [y]					;paso al eax y
   449 00000166 BB04000000              	mov ebx, 4						;paso al ebx un 4
   450 0000016B 31D2                    	xor edx, edx					;limpio el edx ya q vamoa a hacer una division
   451 0000016D F7F3                    	div ebx  						;(y/4)
   452 0000016F 5B                      	pop ebx							;recupero la suma
   453 00000170 01D8                    	add eax, ebx  					;(día + y) + y/4
   454 00000172 50                      	push eax						;salvo la resta
   455 00000173 A1[6E000000]            	mov eax, [y]					;paso al eax el y
   456 00000178 BB64000000              	mov ebx, 100					;paso al ebx un 100
   457 0000017D 31D2                    	xor edx, edx					;limpio el edx ya q vamoa a hacer una division
   458 0000017F F7F3                    	div ebx 						;y/100
   459 00000181 89C3                    	mov ebx, eax					;muevo al ebx el resultado
   460 00000183 58                      	pop eax							;recupero la suma
   461 00000184 29D8                    	sub eax, ebx 					;(día + y + y/4 )- y/100
   462 00000186 50                      	push eax						;salvo la resta
   463 00000187 A1[6E000000]            	mov eax, [y]					;muevo al eax el y
   464 0000018C BB90010000              	mov ebx, 400					;muevo al ebx 400
   465 00000191 31D2                    	xor edx, edx					;limpio el edx ya q vamoa a hacer una division
   466 00000193 F7F3                    	div ebx 						;(y/100)
   467 00000195 5B                      	pop ebx							;recupero la resta
   468 00000196 01D8                    	add eax, ebx  					;(día + y + y/4 - y/100) + y/400
   469 00000198 50                      	push eax   						;salvo la suma
   470 00000199 A1[78000000]            	mov eax, [m]					;muevo al eax el m
   471 0000019E BB1F000000              	mov ebx, 31						;paso al ebx 31
   472 000001A3 F7E3                    	mul ebx							;(31*m)
   473 000001A5 BB0C000000              	mov ebx, 12						;muevo al ebx 12
   474 000001AA 31D2                    	xor edx, edx					;limpio el edx ya q vamoa a hacer una division
   475 000001AC F7F3                    	div ebx							;(31*m)/12)
   476 000001AE 5B                      	pop ebx							;recupero la suma
   477 000001AF 01D8                    	add eax, ebx  					;(día + y + y/4 - y/100 + y/400 )+ (31*m)/12
   478 000001B1 BB07000000              	mov ebx, 7						;paso al ebx un 7
   479 000001B6 31D2                    	xor edx, edx					;limpio el edx ya q vamoa a hacer una division
   480 000001B8 F7F3                    	div ebx							;aplico la division
   481 000001BA 89D0                    	mov eax, edx					;salvo en el eax el resultado el modulo 7
   482                                  
   483                                  ;en esta parte se despliega en forma de switch case casa caso e imprime el dia correspondiente
   484                                  ;a este diccionario. [d]={ 0:dom , 1:lun, 2:mar, 3:mie, 4:jue, 5:vie, 6:sab}
   485                                  revisar_dia:
   486 000001BC 83F800                  	cmp eax, 0
   487 000001BF 741B                    	je domingo
   488 000001C1 83F801                  	cmp eax, 1
   489 000001C4 742A                    	je lunes
   490 000001C6 83F802                  	cmp eax, 2
   491 000001C9 7439                    	je martes
   492 000001CB 83F803                  	cmp eax, 3
   493 000001CE 7448                    	je miercoles
   494 000001D0 83F804                  	cmp eax, 4
   495 000001D3 7454                    	je jueves
   496 000001D5 83F805                  	cmp eax, 5
   497 000001D8 7460                    	je viernes
   498 000001DA EB6F                    	jmp sabado
   499                                  
   500                                  ;en esta parte se despliega en forma de switch case casa caso e imprime el dia correspondiente
   501                                  ;a este diccionario. [d]={ 0:dom , 1:lun, 2:mar, 3:mie, 4:jue, 5:vie, 6:sab}
   502                                  domingo:	
   503 000001DC B9[1D000000]            	mov ecx, sunday
   504 000001E1 BA3A010000              	mov edx, lenSunday
   505 000001E6 E871000000              	call DisplayText
   506 000001EB E9B6000000              	jmp Cerrar
   507                                  lunes:
   508 000001F0 B9[57010000]            	mov ecx, monday
   509 000001F5 BAE3000000              	mov edx, lenMonday
   510 000001FA E85D000000              	call DisplayText
   511 000001FF E9A2000000              	jmp Cerrar
   512                                  martes:
   513 00000204 B9[3A020000]            	mov ecx, tuesday
   514 00000209 BA28010000              	mov edx, lenTuesday
   515 0000020E E849000000              	call DisplayText
   516 00000213 E98E000000              	jmp Cerrar
   517                                  miercoles:
   518 00000218 B9[62030000]            	mov ecx, wendnesday
   519 0000021D BA86010000              	mov edx, lenWendnesday
   520 00000222 E835000000              	call DisplayText
   521 00000227 EB7D                    	jmp Cerrar
   522                                  jueves:
   523 00000229 B9[E8040000]            	mov ecx, thursday
   524 0000022E BA05010000              	mov edx, lenThursday
   525 00000233 E824000000              	call DisplayText
   526 00000238 EB6C                    	jmp Cerrar
   527                                  viernes:
   528 0000023A B9[ED050000]            	mov ecx, friday
   529 0000023F BA27010000              	mov edx, lenFriday
   530 00000244 E813000000              	call DisplayText
   531 00000249 EB5B                    	jmp Cerrar
   532                                  sabado:
   533 0000024B B9[14070000]            	mov ecx, saturday
   534 00000250 BA1C010000              	mov edx, lenSaturday
   535 00000255 E802000000              	call DisplayText
   536 0000025A EB4A                    	jmp Cerrar
   537                                  
   538                                  				
   539                                  ; La siguiente subrutina llama el kernel y muetra un mensaje en pantalla.
   540                                  ; desplega algo en la salida estándar. debe "setearse" lo siguiente:
   541                                  ; ecx: el puntero al mensaje a desplegar
   542                                  ; edx: el largo del mensaje a desplegar
   543                                  ; modifica los registros eax y ebx.
   544                                  DisplayText:
   545 0000025C B804000000                  mov     eax, sys_write
   546 00000261 BB01000000                  mov     ebx, stdout
   547 00000266 CD80                        int     80h 
   548 00000268 C3                          ret
   549                                  
   550                                  ; lee algo de la entrada estándar.debe "setearse" lo siguiente:
   551                                  ; ecx: el puntero al buffer donde se almacenará
   552                                  ; edx: el largo del mensaje a leer
   553                                  ReadText:
   554 00000269 BB00000000                  mov ebx, stdin
   555 0000026E B803000000                  mov eax, sys_read
   556 00000273 CD80                        int 80H
   557 00000275 C3                          ret
   558                                     
   559                                  ;/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
   560                                  ;http://stackoverflow.com/questions/19309749/nasm-assembly-convert-input-to-integer
   561                                  ;Input:
   562                                  ; EAX = integer value to convert
   563                                  ; ESI = pointer to buffer to store the string in (must have room for at least 10 bytes)
   564                                  ; Output:
   565                                  ; EAX = pointer to the first character of the generated string
   566                                  int_to_string:
   567 00000276 56                      	push esi
   568 00000277 83C609                  	add esi,9
   569 0000027A C60600                  	mov byte [esi],0
   570 0000027D BB0A000000              	mov ebx,10         
   571                                  .next_digit:
   572 00000282 31D2                    	xor edx,edx         ; Clear edx prior to dividing edx:eax by ebx
   573 00000284 F7F3                    	div ebx             ; eax /= 10
   574 00000286 80C230                  	add dl,'0'          ; Convert the remainder to ASCII 
   575 00000289 4E                      	dec esi             ; store characters in reverse order
   576 0000028A 8816                    	mov [esi],dl
   577 0000028C 85C0                    	test eax,eax            
   578 0000028E 75F2                    	jnz .next_digit     ; Repeat until eax==0
   579 00000290 89F0                    	mov eax,esi
   580 00000292 5E                      	pop esi
   581 00000293 C3                      	ret
   582                                  	
   583                                  ; Input:
   584                                  ; ESI = pointer to the string to convert
   585                                  ; ECX = number of digits in the string (must be > 0)
   586                                  ; Output:
   587                                  ; EAX = integer value
   588                                  string_to_int:
   589 00000294 31DB                      xor ebx,ebx    ; clear ebx
   590                                  .next_digit:
   591 00000296 0FB606                    movzx eax,byte[esi]
   592 00000299 46                        inc esi
   593 0000029A 2C30                      sub al,'0'    ; convert from ASCII to number
   594 0000029C 6BDB0A                    imul ebx,10
   595 0000029F 01C3                      add ebx,eax   ; ebx = ebx*10 + eax
   596 000002A1 E2F3                      loop .next_digit  ; while (--ecx)
   597 000002A3 89D8                      mov eax,ebx
   598 000002A5 C3                        ret
   599                                  ;//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   600                                  ; La siguiente subrutina cierra el programa
   601                                  Cerrar:
   602 000002A6 B801000000              	mov eax, sys_exit				;muevo la variabla sys_close al eax
   603 000002AB CD80                    	int 80h							;llamo a la interrupcion de kernel
